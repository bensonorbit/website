/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: "sanity.imagePaletteSwatch";
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: "sanity.imagePalette";
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: "sanity.imageDimensions";
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type SanityFileAsset = {
	_id: string;
	_type: "sanity.fileAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type Geopoint = {
	_type: "geopoint";
	lat?: number;
	lng?: number;
	alt?: number;
};

export type Hubble = {
	_id: string;
	_type: "hubble";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	caption?: string;
	alt?: string;
	date?: string;
	photographer?: string;
};

export type Author = {
	_id: string;
	_type: "author";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	slug?: Slug;
	role?: string;
	photo?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	bio?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}>;
};

export type Article = {
	_id: string;
	_type: "article";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	category?: "commons" | "out" | "voices" | "arts" | "star";
	content?: Array<
		| {
				children?: Array<{
					marks?: Array<string>;
					text?: string;
					_type: "span";
					_key: string;
				}>;
				style?:
					| "normal"
					| "h1"
					| "h2"
					| "h3"
					| "h4"
					| "h5"
					| "h6"
					| "blockquote";
				listItem?: "bullet" | "number";
				markDefs?: Array<{
					href?: string;
					_type: "link";
					_key: string;
				}>;
				level?: number;
				_type: "block";
				_key: string;
		  }
		| {
				asset?: {
					_ref: string;
					_type: "reference";
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
				};
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt?: string;
				caption?: string;
				_type: "image";
				_key: string;
		  }
	>;
	summary?: string;
	coverImage?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		caption?: string;
		_type: "image";
	};
	date?: string;
	authors?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "author";
	}>;
};

export type SanityImageCrop = {
	_type: "sanity.imageCrop";
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityImageHotspot = {
	_type: "sanity.imageHotspot";
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageAsset = {
	_id: string;
	_type: "sanity.imageAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
	_type: "sanity.assetSourceData";
	name?: string;
	id?: string;
	url?: string;
};

export type SanityImageMetadata = {
	_type: "sanity.imageMetadata";
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type Slug = {
	_type: "slug";
	current?: string;
	source?: string;
};

export type Settings = {
	_id: string;
	_type: "settings";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	about?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}>;
	featuredArticles?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "article";
	}>;
};

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| SanityFileAsset
	| Geopoint
	| Hubble
	| Author
	| Article
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityAssetSourceData
	| SanityImageMetadata
	| Slug
	| Settings;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/fetch.ts
// Variable: articleQuery
// Query: *[_type == "article" && slug.current == $slug] [0] {			content[] {				...,				_type == "image" => {					"url": @.asset->url,					"aspectRatio": @.asset->metadata.dimensions.aspectRatio,					"lqip": @.asset->metadata.lqip,					alt,					caption,				}			},			// groq  _id,  "title": coalesce(title, "Untitled"),  "slug": slug.current,  summary,  category,  "date": coalesce(date, _updatedAt),  "url": coalesce("/" + category + "/" + slug.current, "/"),  authors[] -> {    "name": coalesce(name, "Unknown Author"),    "slug": slug.current,  },  "coverImage": {	"url": coverImage.asset->url,	"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,	"lqip": coverImage.asset->metadata.lqip,	"alt": coverImage.alt,	"caption": coverImage.caption,  }		}
export type ArticleQueryResult = {
	content: Array<
		| {
				children?: Array<{
					marks?: Array<string>;
					text?: string;
					_type: "span";
					_key: string;
				}>;
				style?:
					| "blockquote"
					| "h1"
					| "h2"
					| "h3"
					| "h4"
					| "h5"
					| "h6"
					| "normal";
				listItem?: "bullet" | "number";
				markDefs?: Array<{
					href?: string;
					_type: "link";
					_key: string;
				}>;
				level?: number;
				_type: "block";
				_key: string;
		  }
		| {
				asset?: {
					_ref: string;
					_type: "reference";
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
				};
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt: string | null;
				caption: string | null;
				_type: "image";
				_key: string;
				url: string | null;
				aspectRatio: number | null;
				lqip: string | null;
		  }
	> | null;
	_id: string;
	title: string | "Untitled";
	slug: string | null;
	summary: string | null;
	category: "arts" | "commons" | "out" | "star" | "voices" | null;
	date: string;
	url: string | "/";
	authors: Array<{
		name: string | "Unknown Author";
		slug: string | null;
	}> | null;
	coverImage: {
		url: string | null;
		aspectRatio: number | null;
		lqip: string | null;
		alt: string | null;
		caption: string | null;
	};
} | null;
// Variable: latestArticlesQuery
// Query: *[_type == "article"] | order(date desc) [0...4] {			// groq  _id,  "title": coalesce(title, "Untitled"),  "slug": slug.current,  summary,  category,  "date": coalesce(date, _updatedAt),  "url": coalesce("/" + category + "/" + slug.current, "/"),  authors[] -> {    "name": coalesce(name, "Unknown Author"),    "slug": slug.current,  },  "coverImage": {	"url": coverImage.asset->url,	"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,	"lqip": coverImage.asset->metadata.lqip,	"alt": coverImage.alt,	"caption": coverImage.caption,  }		}
export type LatestArticlesQueryResult = Array<{
	_id: string;
	title: string | "Untitled";
	slug: string | null;
	summary: string | null;
	category: "arts" | "commons" | "out" | "star" | "voices" | null;
	date: string;
	url: string | "/";
	authors: Array<{
		name: string | "Unknown Author";
		slug: string | null;
	}> | null;
	coverImage: {
		url: string | null;
		aspectRatio: number | null;
		lqip: string | null;
		alt: string | null;
		caption: string | null;
	};
}>;
// Variable: categoryArticlesQuery
// Query: *[_type == "article" && category == $category] | order(date desc) [0...14] {			// groq  _id,  "title": coalesce(title, "Untitled"),  "slug": slug.current,  summary,  category,  "date": coalesce(date, _updatedAt),  "url": coalesce("/" + category + "/" + slug.current, "/"),  authors[] -> {    "name": coalesce(name, "Unknown Author"),    "slug": slug.current,  },  "coverImage": {	"url": coverImage.asset->url,	"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,	"lqip": coverImage.asset->metadata.lqip,	"alt": coverImage.alt,	"caption": coverImage.caption,  }		}
export type CategoryArticlesQueryResult = Array<{
	_id: string;
	title: string | "Untitled";
	slug: string | null;
	summary: string | null;
	category: "arts" | "commons" | "out" | "star" | "voices" | null;
	date: string;
	url: string | "/";
	authors: Array<{
		name: string | "Unknown Author";
		slug: string | null;
	}> | null;
	coverImage: {
		url: string | null;
		aspectRatio: number | null;
		lqip: string | null;
		alt: string | null;
		caption: string | null;
	};
}>;
// Variable: allArticlesQuery
// Query: *[_type == "article"] | order(date desc) {			// groq  _id,  "title": coalesce(title, "Untitled"),  "slug": slug.current,  summary,  category,  "date": coalesce(date, _updatedAt),  "url": coalesce("/" + category + "/" + slug.current, "/"),  authors[] -> {    "name": coalesce(name, "Unknown Author"),    "slug": slug.current,  },  "coverImage": {	"url": coverImage.asset->url,	"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,	"lqip": coverImage.asset->metadata.lqip,	"alt": coverImage.alt,	"caption": coverImage.caption,  }		}
export type AllArticlesQueryResult = Array<{
	_id: string;
	title: string | "Untitled";
	slug: string | null;
	summary: string | null;
	category: "arts" | "commons" | "out" | "star" | "voices" | null;
	date: string;
	url: string | "/";
	authors: Array<{
		name: string | "Unknown Author";
		slug: string | null;
	}> | null;
	coverImage: {
		url: string | null;
		aspectRatio: number | null;
		lqip: string | null;
		alt: string | null;
		caption: string | null;
	};
}>;
// Variable: settingsQuery
// Query: *[_type == "settings"] [0] {			...,			"featuredArticles": featuredArticles[]-> {				// groq  _id,  "title": coalesce(title, "Untitled"),  "slug": slug.current,  summary,  category,  "date": coalesce(date, _updatedAt),  "url": coalesce("/" + category + "/" + slug.current, "/"),  authors[] -> {    "name": coalesce(name, "Unknown Author"),    "slug": slug.current,  },  "coverImage": {	"url": coverImage.asset->url,	"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,	"lqip": coverImage.asset->metadata.lqip,	"alt": coverImage.alt,	"caption": coverImage.caption,  }			}		}
export type SettingsQueryResult = {
	_id: string;
	_type: "settings";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	about?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}>;
	featuredArticles: Array<{
		_id: string;
		title: string | "Untitled";
		slug: string | null;
		summary: string | null;
		category: "arts" | "commons" | "out" | "star" | "voices" | null;
		date: string;
		url: string | "/";
		authors: Array<{
			name: string | "Unknown Author";
			slug: string | null;
		}> | null;
		coverImage: {
			url: string | null;
			aspectRatio: number | null;
			lqip: string | null;
			alt: string | null;
			caption: string | null;
		};
	}> | null;
} | null;
// Variable: hubbleQuery
// Query: *[_type == "hubble"] | order(date desc) {			...,			"date": coalesce(date, _createdAt),			"image": {				"url": image.asset->url,				"aspectRatio": image.asset->metadata.dimensions.aspectRatio,				"lqip": image.asset->metadata.lqip,			}		}
export type HubbleQueryResult = Array<{
	_id: string;
	_type: "hubble";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	image: {
		url: string | null;
		aspectRatio: number | null;
		lqip: string | null;
	};
	caption?: string;
	alt?: string;
	date: string;
	photographer?: string;
}>;
// Variable: authorQuery
// Query: *[_type == "author" && slug.current == $slug] [0] {			...,			"photo": {				"url": photo.asset->url,				"aspectRatio": photo.asset->metadata.dimensions.aspectRatio,				"lqip": photo.asset->metadata.lqip,			},			"articles": *[_type == "article" && references(^._id)] | order(date desc) {				// groq  _id,  "title": coalesce(title, "Untitled"),  "slug": slug.current,  summary,  category,  "date": coalesce(date, _updatedAt),  "url": coalesce("/" + category + "/" + slug.current, "/"),  authors[] -> {    "name": coalesce(name, "Unknown Author"),    "slug": slug.current,  },  "coverImage": {	"url": coverImage.asset->url,	"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,	"lqip": coverImage.asset->metadata.lqip,	"alt": coverImage.alt,	"caption": coverImage.caption,  }			}		}
export type AuthorQueryResult = {
	_id: string;
	_type: "author";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	slug?: Slug;
	role?: string;
	photo: {
		url: string | null;
		aspectRatio: number | null;
		lqip: string | null;
	};
	bio?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}>;
	articles: Array<{
		_id: string;
		title: string | "Untitled";
		slug: string | null;
		summary: string | null;
		category: "arts" | "commons" | "out" | "star" | "voices" | null;
		date: string;
		url: string | "/";
		authors: Array<{
			name: string | "Unknown Author";
			slug: string | null;
		}> | null;
		coverImage: {
			url: string | null;
			aspectRatio: number | null;
			lqip: string | null;
			alt: string | null;
			caption: string | null;
		};
	}>;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
	interface SanityQueries {
		'\n\t\t*[_type == "article" && slug.current == $slug] [0] {\n\t\t\tcontent[] {\n\t\t\t\t...,\n\t\t\t\t_type == "image" => {\n\t\t\t\t\t"url": @.asset->url,\n\t\t\t\t\t"aspectRatio": @.asset->metadata.dimensions.aspectRatio,\n\t\t\t\t\t"lqip": @.asset->metadata.lqip,\n\t\t\t\t\talt,\n\t\t\t\t\tcaption,\n\t\t\t\t}\n\t\t\t},\n\t\t\t// groq\n  _id,\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  summary,\n  category,\n  "date": coalesce(date, _updatedAt),\n  "url": coalesce("/" + category + "/" + slug.current, "/"),\n  authors[] -> {\n    "name": coalesce(name, "Unknown Author"),\n    "slug": slug.current,\n  },\n  "coverImage": {\n\t"url": coverImage.asset->url,\n\t"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,\n\t"lqip": coverImage.asset->metadata.lqip,\n\t"alt": coverImage.alt,\n\t"caption": coverImage.caption,\n  }\n\n\t\t}\n\t': ArticleQueryResult;
		'\n\t\t*[_type == "article"] | order(date desc) [0...4] {\n\t\t\t// groq\n  _id,\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  summary,\n  category,\n  "date": coalesce(date, _updatedAt),\n  "url": coalesce("/" + category + "/" + slug.current, "/"),\n  authors[] -> {\n    "name": coalesce(name, "Unknown Author"),\n    "slug": slug.current,\n  },\n  "coverImage": {\n\t"url": coverImage.asset->url,\n\t"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,\n\t"lqip": coverImage.asset->metadata.lqip,\n\t"alt": coverImage.alt,\n\t"caption": coverImage.caption,\n  }\n\n\t\t}\n\t': LatestArticlesQueryResult;
		'\n\t\t*[_type == "article" && category == $category] | order(date desc) [0...14] {\n\t\t\t// groq\n  _id,\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  summary,\n  category,\n  "date": coalesce(date, _updatedAt),\n  "url": coalesce("/" + category + "/" + slug.current, "/"),\n  authors[] -> {\n    "name": coalesce(name, "Unknown Author"),\n    "slug": slug.current,\n  },\n  "coverImage": {\n\t"url": coverImage.asset->url,\n\t"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,\n\t"lqip": coverImage.asset->metadata.lqip,\n\t"alt": coverImage.alt,\n\t"caption": coverImage.caption,\n  }\n\n\t\t}\n\t': CategoryArticlesQueryResult;
		'\n\t\t*[_type == "article"] | order(date desc) {\n\t\t\t// groq\n  _id,\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  summary,\n  category,\n  "date": coalesce(date, _updatedAt),\n  "url": coalesce("/" + category + "/" + slug.current, "/"),\n  authors[] -> {\n    "name": coalesce(name, "Unknown Author"),\n    "slug": slug.current,\n  },\n  "coverImage": {\n\t"url": coverImage.asset->url,\n\t"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,\n\t"lqip": coverImage.asset->metadata.lqip,\n\t"alt": coverImage.alt,\n\t"caption": coverImage.caption,\n  }\n\n\t\t}\n\t': AllArticlesQueryResult;
		'\n\t\t*[_type == "settings"] [0] {\n\t\t\t...,\n\t\t\t"featuredArticles": featuredArticles[]-> {\n\t\t\t\t// groq\n  _id,\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  summary,\n  category,\n  "date": coalesce(date, _updatedAt),\n  "url": coalesce("/" + category + "/" + slug.current, "/"),\n  authors[] -> {\n    "name": coalesce(name, "Unknown Author"),\n    "slug": slug.current,\n  },\n  "coverImage": {\n\t"url": coverImage.asset->url,\n\t"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,\n\t"lqip": coverImage.asset->metadata.lqip,\n\t"alt": coverImage.alt,\n\t"caption": coverImage.caption,\n  }\n\n\t\t\t}\n\t\t}\n\t': SettingsQueryResult;
		'\n\t\t*[_type == "hubble"] | order(date desc) {\n\t\t\t...,\n\t\t\t"date": coalesce(date, _createdAt),\n\t\t\t"image": {\n\t\t\t\t"url": image.asset->url,\n\t\t\t\t"aspectRatio": image.asset->metadata.dimensions.aspectRatio,\n\t\t\t\t"lqip": image.asset->metadata.lqip,\n\t\t\t}\n\t\t}\n\t': HubbleQueryResult;
		'\n\t\t*[_type == "author" && slug.current == $slug] [0] {\n\t\t\t...,\n\t\t\t"photo": {\n\t\t\t\t"url": photo.asset->url,\n\t\t\t\t"aspectRatio": photo.asset->metadata.dimensions.aspectRatio,\n\t\t\t\t"lqip": photo.asset->metadata.lqip,\n\t\t\t},\n\t\t\t"articles": *[_type == "article" && references(^._id)] | order(date desc) {\n\t\t\t\t// groq\n  _id,\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  summary,\n  category,\n  "date": coalesce(date, _updatedAt),\n  "url": coalesce("/" + category + "/" + slug.current, "/"),\n  authors[] -> {\n    "name": coalesce(name, "Unknown Author"),\n    "slug": slug.current,\n  },\n  "coverImage": {\n\t"url": coverImage.asset->url,\n\t"aspectRatio": coverImage.asset->metadata.dimensions.aspectRatio,\n\t"lqip": coverImage.asset->metadata.lqip,\n\t"alt": coverImage.alt,\n\t"caption": coverImage.caption,\n  }\n\n\t\t\t}\n\t\t}\n\t': AuthorQueryResult;
	}
}
